---
import { Image } from "astro:assets";

interface ImageGridProps {
  images: {
    src: string;
    alt: string;
    caption?: string;
    fullsizeUrl?: string; // Optional full-size URL for lightbox
  }[];
  columns?: 2 | 3 | 4;
}

const { images, columns = 3 } = Astro.props as ImageGridProps;

const gridClass = {
  2: "grid-cols-2 sm:grid-cols-2",
  3: "grid-cols-2 sm:grid-cols-3",
  4: "grid-cols-2 sm:grid-cols-4",
}[columns];
---

<section>
  <div class={`grid ${gridClass} gap-4 my-8`}>
    {
      images.map((image) => {
        const lightboxSrc = image.fullsizeUrl || image.src;
        return (
          <div class="relative aspect-square">
            <button
              type="button"
              class="block w-full h-full cursor-pointer transition-transform hover:scale-105 rounded-lg"
              onclick={`openLightbox('${lightboxSrc}', '${image.alt}', '${image.caption || ''}')`}
            >
            <Image
              alt={image.alt}
              src={image.src}
              width={500}
              height={500}
              class="rounded-lg object-cover w-full h-full"
            />
          </button>
        </div>
        );
      })
    }
  </div>

  <!-- Simple lightbox overlay -->
  <div id="lightbox" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden items-center justify-center p-4" onclick="closeLightbox()">
    <div class="relative max-w-full max-h-full" onclick="event.stopPropagation()">
      <button
        onclick="closeLightbox()"
        class="absolute top-4 right-4 text-white text-2xl bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-70"
      >
        Ã—
      </button>
      <img id="lightbox-img" src="" alt="" class="max-w-full max-h-[90vh] object-contain" />
      <p id="lightbox-caption" class="mt-4 text-white text-center text-lg hidden"></p>
    </div>
  </div>
</section>

<script is:inline>
  function openLightbox(src, alt, caption) {
    const lightbox = document.getElementById('lightbox');
    const img = document.getElementById('lightbox-img');
    const captionEl = document.getElementById('lightbox-caption');

    img.src = src;
    img.alt = alt;

    if (caption && caption.trim()) {
      captionEl.textContent = caption;
      captionEl.classList.remove('hidden');
    } else {
      captionEl.classList.add('hidden');
    }

    lightbox.classList.remove('hidden');
    lightbox.classList.add('flex');
    document.body.style.overflow = 'hidden';
  }

  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    lightbox.classList.add('hidden');
    lightbox.classList.remove('flex');
    document.body.style.overflow = '';
  }

  // Close on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeLightbox();
    }
  });
</script>
